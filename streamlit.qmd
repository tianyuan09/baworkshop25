---
title:  Develop an app with `streamlit`
code-block-border-left: "#31BAE9"
code-block-bg: true
highlight-style: github
---

## Context and Goal

::: callout-important
#### Goal
Transition from a prototype `.ipynb` file to a production-ready `.py` file that builds an interactive Streamlit dashboard.
:::

Data scientists often start in Jupyter Notebooks for exploration and analysis. However, real-world applications require deployable, interactive dashboards for sharing insights with others.
The goal here is to:

* Refactor your notebook code into modular Python functions.
* Wrap those functions inside an interactive Streamlit interface.
* Understand how to iterate quickly with streamlit run app.py.



## Start from a `.ipynb` file

- [ ] Download the following files from Canvas course. 

    * `Compute Financial Ratios Notebook.ipynb` -- a Jupyter Notebook
    * `sp500_data.csv` ‚Äì Financial data.
    * `sp500_tickers.csv` ‚Äì List of tickers.

- [ ] Create a folder named `streamlit25` in the default directory using bash command.
- [ ] Drag these three files into this folder in your browser.


## Make it a `.py` file with functions

The syntax of defining a python function. 

![](images/apythonfunc.png){width=400}

- [ ] 1. Read the `Compute Financial Ratios Notebook.ipynb` 
- [ ] 2. Add a z-score metric seen in @fig-z-score. 

![Z-score reference](images/z-score.png){width=550px #fig-z-score}

- [ ] 3. Make a empty `finratios.py` script file inside the same folder using bash command.
- [ ] 4. Re-write the notebook code into reusable functions inside `finratios.py` 
    * 'fetch_data_local'
    * `fetch_data_local_single_ticker`
    * `calculate_metrics`
    * `plot_trend`

**Good practices**:

- [ ] Each function should do one clear thing (e.g., load data, compute metrics, or plot)
- [ ] When writing functions, **only use variables that come from the input parameters**. If you need to use something inside the function, then make them input parameters. 

::: callout-warning
### ‚ö†Ô∏è Be Careful with Function Inputs
Don‚Äôt rely on variables that aren‚Äôt passed into your function.  
If your function can‚Äôt run using only its inputs, it‚Äôs not truly reusable.

‚úÖ **Do this:**
```python
def compute_margin(revenue, cost):
    return (revenue - cost) / revenue
```
üö´ **Not this**:
```python
total_revenue = 1000
def compute_margin(cost):
    return (total_revenue - cost) / total_revenue  
    # works in notebook, breaks in module
```
:::


- [ ] Decide on return values.  
- [ ] Add a `if __name__ == "__main__":` for testing at the bottom of `finratios.py`, such as:

```python
if __name__ == "__main__":
    # Simple test cases
    print(compute_pe_ratio(1000000, 50000, 30))
```



## Learn a bit about Streamlit

::: callout-tip
You don‚Äôt know what Streamlit can do. 
Streamlit doesn‚Äôt know what you want.  
But, we‚Äôve gotta start *somewhere*.  
So let‚Äôs learn a bit. Once you know **what it *can* do**,  
you‚Äôll finally know **what you *can make it do*** (with AI's help).
:::


::: callout-tip
#### How learn to use a new Python package?

* What is Streamlit, and where is its API reference and official documentation?
* What can Streamlit do ‚Äî what kinds of apps or problems is it best at solving?
* What small examples or experiments can I build to quickly discover and learn its core features?
:::

* **Start with the official docs and examples** ‚Äî skim the Streamlit docs homepage and gallery to get a mental map of what‚Äôs possible before diving into code.
* **Learn by doing small experiments** ‚Äî build micro-apps (e.g., one with a button, one with a chart) to turn reading into muscle memory.
    * E.g., create `app1.py`, `app2.py` files each to test and run some micro streamlit apps. 
* **Read code, not just tutorials** ‚Äî explore community demos or open-source Streamlit apps to see how others structure layouts, manage state, and handle inputs.
* **Iterate with feedback loops** ‚Äî run streamlit run `app.py` often and tweak one thing at a time; immediate visual feedback accelerates understanding.
* **Reflect and generalize**  ‚Äî after each mini-project, note what patterns repeat (e.g., sidebar widgets, caching, layout control) to build knowledge for future tools.


## Build a Streamlit app

Here is an example. Try to build a dashboard displaying the financial metrics interactively. 

![An Streamlit Example](images/dashboard.png){width=650px}

## üí° Bonus: Add an AI Feature

**Integrate the Google Gemini API** to enhance your app with AI-powered capabilities.

- **Explore the API**  
  Learn how to use the [Google Gemini API](https://ai.google.dev/gemini-api/docs/migrate#install-sdk) and follow the setup guide to install the SDK.

- **Get an API Key**  
  You can obtain a free API key using your Google account.

- **Keep It Secure**  
  Never share or publish your API key on GitHub or any public platform ‚Äî treat it like a password. Delete it after use. 

